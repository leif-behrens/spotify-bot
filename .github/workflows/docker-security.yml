# DevSecOps Docker Security Pipeline
# CWE-1104: Use of Unmaintained Third Party Components
# Container Security: Image Scanning, Base Image Security

name: 🐳 Container Security

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # Security: Weekly container base image updates check
  schedule:
    - cron: '0 8 * * 1'

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  container-security:
    name: 🔒 Container Security Scan
    runs-on: ubuntu-latest

    steps:
    # Schritt 1: Code checkout
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    # Schritt 2: Docker Setup mit Security
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Security: Use latest buildx version
        version: latest

    # Schritt 3: Build Docker Image (Security-focused)
    - name: 🔨 Build Docker Image
      run: |
        echo "::group::Docker Build with Security Context"

        # Security: Build with security labels
        docker build \
          --no-cache \
          --tag spotify-bot:latest \
          --tag spotify-bot:${{ github.sha }} \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "org.opencontainers.image.revision=${{ github.sha }}" \
          --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          .

        echo "Docker image built successfully"
        docker images spotify-bot
        echo "::endgroup::"

    # Schritt 4: Container Vulnerability Scanning (Trivy)
    - name: 🔍 Container Vulnerability Scan (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'spotify-bot:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Don't fail build, but report

    # Schritt 5: Upload Trivy Results to GitHub Security
    - name: 📤 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # Schritt 6: Docker Image Analysis
    - name: 🔬 Docker Image Analysis
      run: |
        echo "::group::Docker Image Security Analysis"

        # Container Details
        echo "### Container Image Analysis" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        docker inspect spotify-bot:latest --format='{{json .Config}}' | jq '.ExposedPorts, .User, .WorkingDir'
        echo "```" >> $GITHUB_STEP_SUMMARY

        # Security: Check for root user (Security Anti-Pattern)
        USER=$(docker inspect spotify-bot:latest --format='{{.Config.User}}')
        if [ "$USER" = "root" ] || [ -z "$USER" ]; then
          echo "::warning::Container runs as root - Security Risk!"
          echo "- ⚠️ **Security Warning**: Container runs as root user" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Container runs as non-root user: $USER" >> $GITHUB_STEP_SUMMARY
        fi

        # Port Analysis
        echo "### Exposed Ports:" >> $GITHUB_STEP_SUMMARY
        docker inspect spotify-bot:latest --format='{{range $key, $value := .Config.ExposedPorts}}{{$key}} {{end}}' >> $GITHUB_STEP_SUMMARY

        echo "::endgroup::"

    # Schritt 7: Docker Bench Security (Optional)
    - name: 🛡️ Docker Bench Security
      run: |
        echo "::group::Docker Security Benchmarks"

        # Simplified security checks
        echo "### Docker Security Checklist:" >> $GITHUB_STEP_SUMMARY

        # Check if Dockerfile uses specific version tags
        if grep -q "FROM.*:latest" Dockerfile; then
          echo "- ⚠️ **Warning**: Using 'latest' tag in Dockerfile" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ **Good**: Using specific version tags" >> $GITHUB_STEP_SUMMARY
        fi

        # Check for ADD vs COPY
        if grep -q "^ADD " Dockerfile; then
          echo "- ⚠️ **Warning**: Using ADD instead of COPY" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ **Good**: Using COPY instead of ADD" >> $GITHUB_STEP_SUMMARY
        fi

        # Check for secrets in environment
        if grep -qi "password\|secret\|key" Dockerfile; then
          echo "- ⚠️ **Warning**: Potential secrets in Dockerfile" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ **Good**: No obvious secrets in Dockerfile" >> $GITHUB_STEP_SUMMARY
        fi

        echo "::endgroup::"

    # Schritt 8: Container Runtime Security Test
    - name: 🧪 Container Runtime Security Test
      run: |
        echo "::group::Container Runtime Security Test"

        # Start container for security testing
        CONTAINER_ID=$(docker run -d --name security-test spotify-bot:latest)
        sleep 5

        # Security Tests
        echo "### Runtime Security Tests:" >> $GITHUB_STEP_SUMMARY

        # Test 1: Check if container can access host processes
        if docker exec $CONTAINER_ID ps aux | grep -v "PID.*CMD" | wc -l > /tmp/process_count; then
          PROCESS_COUNT=$(cat /tmp/process_count)
          if [ $PROCESS_COUNT -gt 10 ]; then
            echo "- ⚠️ **Warning**: Container can see many host processes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Good**: Container process isolation working" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Test 2: Check container capabilities
        echo "- 🔍 **Info**: Container started successfully" >> $GITHUB_STEP_SUMMARY

        # Cleanup
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID

        echo "::endgroup::"

    # Schritt 9: SBOM Generation (Software Bill of Materials)
    - name: 📋 Generate SBOM
      run: |
        echo "::group::Software Bill of Materials Generation"

        # Install syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

        # Generate SBOM for container
        syft spotify-bot:latest -o json > sbom.json
        syft spotify-bot:latest -o table

        echo "::endgroup::"

    # Schritt 10: Upload Artifacts
    - name: 📤 Upload Security Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-reports
        path: |
          trivy-results.sarif
          sbom.json
        retention-days: 30

  # Job 2: Dockerfile Security Linting
  dockerfile-security:
    name: 📄 Dockerfile Security Lint
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Dockerfile Security Scan (Hadolint)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: 📤 Upload Hadolint Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: 📊 Dockerfile Security Summary
      run: |
        echo "## 🐳 Dockerfile Security Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Hadolint security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 SARIF results uploaded to GitHub Security" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Check Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
