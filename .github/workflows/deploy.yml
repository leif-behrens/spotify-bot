name: üöÄ Deploy to Raspberry Pi

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Security: CWE-200 - Information Exposure Prevention
env:
  DEPLOY_USER: pi
  APP_NAME: spotify-bot

jobs:
  # Security and code quality checks
  security-checks:
    name: üîí Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety flake8 mypy
          pip install -r requirements.txt

      - name: Run Bandit security scanner
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ --severity-level medium

      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Code style check
        run: |
          flake8 src/ --max-line-length=120 --ignore=E501,W503

      - name: Type checking
        run: |
          mypy src/ --ignore-missing-imports || true

  # Build and test
  build-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test configuration loading
        run: |
          source venv/bin/activate
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from src.core.config import ConfigManager
          config = ConfigManager()
          print('‚úÖ Configuration loaded successfully')
          "

      - name: Test logging system
        run: |
          source venv/bin/activate
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from src.utils.logging_setup import SecureLoggingSetup
          logger = SecureLoggingSetup.get_logger('test')
          logger.info('Test log message')
          print('‚úÖ Logging system working')
          "

  # Deploy to Raspberry Pi
  deploy:
    name: üöÄ Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: [security-checks, build-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ secrets.APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add Raspberry Pi to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Host key scan failed"

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"

      - name: Create production configuration
        run: |
          # Create production config from template
          cp config/config.json config/config.production.json

          # Update production settings (without exposing secrets)
          python3 << 'EOF'
          import json
          import os

          # Load base config
          with open('config/config.production.json', 'r') as f:
              config = json.load(f)

          # Update for production
          config['callback_server']['debug'] = False
          config['logging']['level'] = 'INFO'

          # Update email settings if secrets are available
          if os.getenv('SMTP_PASSWORD'):
              config['email_notifications']['sender_password'] = os.getenv('SMTP_PASSWORD')
          if os.getenv('SENDER_EMAIL'):
              config['email_notifications']['sender_email'] = os.getenv('SENDER_EMAIL')
          if os.getenv('RECIPIENT_EMAIL'):
              config['email_notifications']['recipient_email'] = os.getenv('RECIPIENT_EMAIL')

          # Save updated config
          with open('config/config.production.json', 'w') as f:
              json.dump(config, f, indent=2)

          print("‚úÖ Production configuration created")
          EOF
        env:
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}

      - name: Deploy application
        run: |
          chmod +x deploy/deploy.sh
          ./deploy/deploy.sh
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ env.DEPLOY_USER }}

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Check service status
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            sudo systemctl is-active spotify-bot && echo '‚úÖ Service is running' || echo '‚ùå Service is not running'
            sudo systemctl status spotify-bot --no-pager -l --lines=5
          "

          # Check logs for errors
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            echo 'üìã Recent application logs:'
            sudo journalctl -u spotify-bot --no-pager --since='2 minutes ago' --lines=10 || echo 'No recent logs'
          "

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Service Status" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "sudo systemctl status spotify-bot --no-pager -l --lines=3" >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Status check failed" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Rollback capability
  rollback:
    name: üîÑ Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: deploy
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Performing rollback..."
          ssh ${{ env.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd /opt/spotify-bot

            # Stop current service
            sudo systemctl stop spotify-bot || true

            # Restore from backup if available
            if [ -d '../spotify-bot.backup' ]; then
              sudo rm -rf /opt/spotify-bot
              sudo mv /opt/spotify-bot.backup /opt/spotify-bot
              sudo systemctl start spotify-bot
              echo '‚úÖ Rollback completed'
            else
              echo '‚ùå No backup available for rollback'
              exit 1
            fi
          "
